/*
 * Orthros cipher primitives shared across GPU and CPU implementations.
 */

#ifndef ORTHROS_CORE_H
#define ORTHROS_CORE_H

#include "common_types.h"

#ifdef __CUDACC__
#include <cuda_runtime.h>
#define ORTHROS_HOST_DEVICE __host__ __device__ __forceinline__
#define ORTHROS_DEVICE __device__ __forceinline__
#define ORTHROS_SHARED __shared__
#else
#define ORTHROS_HOST_DEVICE static inline
#define ORTHROS_DEVICE static inline
#define ORTHROS_SHARED
#endif

// -----------------------------------------------------------------------------
// Constant tables (round constants, permutations, s-box)
// -----------------------------------------------------------------------------

#ifdef ORTHROS_DEFINE_CONSTANTS

#ifdef __CUDACC__
__constant__ unsigned char d_rc_branch1[ORTHROS_MAX_ROUNDS][ORTHROS_STATE_SIZE] = {
    {0xa,0x0,0xa,0xc,0x9,0x3,0x2,0x9,0xa,0xc,0x4,0xb,0xc,0x9,0x9,0x1,0xc,0x2,0x3,0x1,0x3,0x2,0x1,0x9,0xc,0x1,0x9,0x3,0xc,0xa,0x8,0x1},
    {0x4,0x4,0x2,0x0,0xc,0xb,0x8,0xb,0x4,0x9,0xc,0xc,0x9,0xb,0xa,0x8,0x8,0x2,0xc,0x1,0x0,0x4,0xb,0xa,0x4,0xa,0x2,0x2,0xc,0x9,0x1,0x8},
    {0x3,0xc,0x0,0xb,0x2,0x0,0x3,0x1,0x4,0x3,0x1,0x0,0x4,0x4,0xc,0xc,0x3,0x1,0x4,0x0,0x1,0xa,0x4,0x1,0x2,0x9,0xa,0x1,0x0,0x8,0xb,0x8},
    {0x3,0x3,0xc,0xc,0x1,0x0,0xa,0x4,0x0,0x4,0x3,0x2,0x8,0x9,0x9,0x4,0x1,0x1,0x8,0x3,0x3,0x2,0x3,0x8,0x4,0x9,0xc,0x2,0x2,0x3,0x0,0x4},
    {0xa,0xa,0x8,0x2,0xc,0x1,0x1,0x1,0x8,0xb,0x9,0x2,0x9,0xa,0xc,0xa,0x0,0x4,0x0,0x9,0x4,0x2,0x4,0x0,0x8,0x8,0xb,0xa,0x2,0x8,0x1,0x4},
    {0x2,0x0,0x8,0x1,0x3,0x8,0x0,0xc,0x9,0xc,0x2,0x9,0x0,0x8,0x8,0x2,0xa,0xa,0xc,0xb,0x2,0x2,0x3,0x1,0x1,0x4,0xa,0x4,0x4,0xa,0xa,0x4},
    {0x9,0x8,0x1,0xc,0x0,0xc,0xb,0x2,0x2,0x1,0x4,0x4,0x0,0x8,0x4,0xb,0xa,0xb,0x3,0x2,0xc,0x9,0x9,0xa,0x2,0x3,0x0,0x9,0x4,0x2,0x3,0xa},
    {0xb,0x2,0x4,0x1,0x1,0x9,0xb,0xc,0x3,0x3,0xc,0x1,0x8,0xb,0x2,0x9,0x3,0x8,0x9,0x0,0x0,0xc,0x8,0x4,0x8,0xa,0x2,0xb,0x2,0x4,0x2,0xb},
    {0x3,0x4,0x9,0x1,0xa,0x3,0x0,0x1,0xa,0x4,0x3,0x0,0x8,0x2,0x2,0xa,0x1,0x9,0x3,0x3,0x2,0x4,0x1,0x0,0x9,0x9,0xc,0x9,0xb,0x0,0x3,0x9},
    {0x3,0x0,0x1,0x2,0x4,0x8,0xa,0x0,0x9,0x3,0x9,0xb,0x9,0x2,0x2,0xc,0x3,0x8,0x0,0x3,0x3,0x0,0x3,0x1,0x8,0xa,0xa,0xc,0x4,0x0,0xb,0xa},
    {0x4,0x4,0x0,0xa,0x9,0x0,0x4,0x9,0x0,0x4,0xb,0x1,0x4,0x1,0x4,0x9,0x2,0xa,0x0,0x4,0x8,0xb,0x8,0xa,0x9,0xb,0x2,0x1,0xb,0x3,0xc,0x4},
    {0x9,0x2,0xc,0x8,0x1,0xb,0x0,0x0,0x0,0x8,0x9,0x9,0x8,0x2,0x9,0x8,0x2,0xa,0x4,0x4,0x1,0x0,0x2,0x3,0x3,0x2,0x9,0x0,0x9,0xc,0x2,0x0}
};

__constant__ unsigned char d_rc_branch2[ORTHROS_MAX_ROUNDS][ORTHROS_STATE_SIZE] = {
    {0xa,0x3,0x4,0xa,0x8,0xc,0xa,0x0,0xa,0x8,0x8,0xb,0x0,0x4,0xa,0x1,0x9,0x8,0x2,0xb,0x9,0x3,0x8,0x1,0xb,0x2,0xb,0xa,0xc,0xa,0xc,0x8},
    {0xc,0xa,0x9,0x8,0x4,0x9,0x0,0xc,0x3,0x0,0x8,0xb,0x9,0xc,0x0,0xc,0x9,0x9,0x3,0x0,0x8,0xb,0xc,0x9,0x8,0x8,0x2,0x8,0x8,0xc,0x2,0xa},
    {0x4,0x0,0x3,0xa,0x2,0x3,0x1,0x1,0xb,0xc,0xc,0xb,0x1,0x3,0xa,0x4,0xa,0xb,0x3,0x9,0xa,0x8,0xc,0x4,0x2,0xb,0xa,0x9,0x3,0x9,0x2,0x4},
    {0x4,0x8,0x9,0x1,0x3,0xc,0x9,0xc,0x0,0xc,0x1,0x8,0x0,0x8,0xc,0xa,0x4,0x8,0x9,0x4,0xc,0x1,0x9,0xb,0x3,0x9,0x9,0xb,0x1,0x2,0x2,0x0},
    {0x3,0x2,0xb,0x3,0x2,0x1,0x8,0x4,0x3,0x0,0x1,0x0,0x9,0xc,0xa,0x4,0xa,0x3,0x1,0xc,0xa,0x9,0x1,0x2,0x3,0x9,0xb,0x8,0xc,0x8,0x3,0x8},
    {0x1,0x0,0xb,0xc,0xc,0x3,0x0,0x4,0xa,0x1,0xb,0x8,0x1,0x3,0xb,0x8,0x2,0x9,0xc,0x9,0x0,0xb,0x8,0xb,0xb,0x1,0x4,0x9,0x8,0xb,0xb,0x3},
    {0xa,0x9,0x1,0xc,0x2,0x3,0x3,0xa,0x4,0x0,0xc,0x2,0x3,0x3,0xb,0x3,0x4,0xa,0x0,0x2,0x8,0x9,0x9,0x0,0x0,0x0,0x2,0xb,0x4,0x0,0x9,0x3},
    {0x8,0xa,0x2,0x9,0x3,0x1,0xa,0xb,0x0,0x4,0x1,0x3,0xb,0xc,0x2,0xb,0xb,0x8,0x9,0xa,0x1,0x3,0xa,0xb,0xb,0xc,0x4,0xb,0x0,0x4,0x8,0xb},
    {0x9,0xb,0x1,0xb,0x8,0xb,0xc,0x3,0x9,0x0,0xa,0x3,0x4,0x2,0x2,0x0,0x4,0x8,0x0,0x9,0x1,0x2,0x4,0xa,0x9,0xa,0x1,0x8,0x0,0xa,0x3,0x2},
    {0xa,0x4,0xa,0xc,0x2,0x9,0xb,0x8,0x8,0x2,0x8,0x3,0xc,0x9,0x1,0x3,0xc,0xb,0x4,0x4,0x9,0x2,0xc,0x4,0x9,0x1,0xa,0xa,0x1,0x0,0x0,0xc},
    {0xc,0xa,0xb,0x0,0x8,0x9,0x0,0x9,0x4,0x8,0x1,0x0,0xc,0xb,0x0,0x4,0x3,0x2,0x0,0x1,0xa,0x2,0x0,0xc,0x0,0xa,0xc,0xc,0x0,0x9,0xb,0x1},
    {0x4,0xb,0xb,0xa,0x3,0xb,0x8,0x9,0x8,0x4,0xc,0xb,0x0,0x2,0x8,0xc,0x3,0x8,0x3,0x9,0x0,0x8,0x9,0xa,0x4,0xc,0xc,0xc,0xc,0xc,0xc,0x1}
};

__constant__ unsigned char d_sbox[16] = {0x1,0x0,0x2,0x4,0x3,0x8,0x6,0xd,0x9,0xa,0xb,0xe,0xf,0xc,0x7,0x5};
__constant__ unsigned char d_perm_n1[ORTHROS_STATE_SIZE] = {10,27,5,1,30,23,16,13,21,31,6,14,0,25,11,18,15,28,19,24,7,8,22,3,4,29,9,2,26,20,12,17};
__constant__ unsigned char d_perm_n2[ORTHROS_STATE_SIZE] = {26,13,7,11,29,0,17,21,23,5,18,25,12,10,28,2,14,19,24,22,1,8,4,31,15,6,27,9,16,30,20,3};
__constant__ unsigned int  d_perm_b1[ORTHROS_STATE_SIZE * 4] = {6,46,62,126,70,52,28,14,36,125,72,83,106,95,4,35,25,41,10,76,87,74,120,42,88,21,11,67,64,38,112,50,85,109,24,65,99,0,49,37,8,66,114,47,127,100,56,40,13,117,78,86,92,58,124,101,55,89,97,9,18,116,59,15,20,45,75,2,77,27,1,60,115,107,26,69,119,3,84,51,123,110,31,82,113,53,81,102,63,118,93,12,30,94,108,32,5,111,29,43,91,19,79,33,73,44,98,48,22,61,68,105,34,71,54,104,17,57,80,103,96,121,23,39,122,90,7,16};
__constant__ unsigned int  d_perm_b2[ORTHROS_STATE_SIZE * 4] = {20,122,74,62,119,35,15,66,9,85,32,117,21,83,127,106,11,98,115,59,71,90,56,26,2,44,103,121,114,107,68,16,84,1,102,33,80,52,76,36,27,94,37,55,82,12,112,64,105,14,91,17,108,124,6,93,29,86,123,79,72,53,19,99,50,18,81,73,67,88,4,61,111,49,24,45,57,78,100,22,110,47,116,54,60,70,97,39,3,41,48,96,23,42,113,87,126,13,31,40,51,25,65,125,8,101,118,28,38,89,5,104,109,120,69,43,7,77,58,34,10,63,30,95,75,46,0,92};
__constant__ unsigned int  d_perm_k1[ORTHROS_STATE_SIZE * 4] = {0,53,87,73,22,95,99,48,61,36,108,1,24,67,119,93,54,103,69,112,16,111,94,122,31,66,33,83,47,3,65,62,123,9,101,19,5,58,89,37,38,51,28,106,82,76,121,4,70,7,42,92,104,80,45,75,114,17,2,97,46,107,63,18,109,15,127,43,13,59,29,125,77,11,50,30,12,90,118,64,20,35,57,10,124,56,68,91,116,21,84,98,52,81,126,34,105,27,120,74,6,85,40,72,113,41,23,49,79,55,102,8,117,39,88,26,25,110,14,32,115,100,86,71,78,44,96,60};
__constant__ unsigned int  d_perm_k2[ORTHROS_STATE_SIZE * 4] = {76,30,53,35,31,46,2,79,11,125,110,87,39,91,14,101,97,118,36,48,29,80,57,115,49,18,74,85,61,82,105,126,70,12,47,111,51,17,66,1,60,96,116,71,81,114,104,15,42,124,100,4,113,44,75,89,23,0,84,107,32,26,88,8,69,121,38,94,37,86,54,21,62,123,41,10,16,95,117,65,45,50,72,20,109,58,7,67,108,28,3,55,92,103,24,5,77,9,27,102,122,6,106,22,99,34,90,56,43,83,120,64,78,59,119,93,40,98,52,68,112,33,63,25,19,73,127,13};
#endif

#endif // ORTHROS_DEFINE_CONSTANTS

// External declarations (only when not defining constants)
#if !defined(ORTHROS_DEFINE_CONSTANTS) && defined(__CUDACC__)
extern __constant__ unsigned char d_rc_branch1[ORTHROS_MAX_ROUNDS][ORTHROS_STATE_SIZE];
extern __constant__ unsigned char d_rc_branch2[ORTHROS_MAX_ROUNDS][ORTHROS_STATE_SIZE];
extern __constant__ unsigned char d_sbox[16];
extern __constant__ unsigned char d_perm_n1[ORTHROS_STATE_SIZE];
extern __constant__ unsigned char d_perm_n2[ORTHROS_STATE_SIZE];
extern __constant__ unsigned int  d_perm_b1[ORTHROS_STATE_SIZE * 4];
extern __constant__ unsigned int  d_perm_b2[ORTHROS_STATE_SIZE * 4];
extern __constant__ unsigned int  d_perm_k1[ORTHROS_STATE_SIZE * 4];
extern __constant__ unsigned int  d_perm_k2[ORTHROS_STATE_SIZE * 4];
#endif

static const unsigned char h_rc_branch1[ORTHROS_MAX_ROUNDS][ORTHROS_STATE_SIZE] = {
    {0xa,0x0,0xa,0xc,0x9,0x3,0x2,0x9,0xa,0xc,0x4,0xb,0xc,0x9,0x9,0x1,0xc,0x2,0x3,0x1,0x3,0x2,0x1,0x9,0xc,0x1,0x9,0x3,0xc,0xa,0x8,0x1},
    {0x4,0x4,0x2,0x0,0xc,0xb,0x8,0xb,0x4,0x9,0xc,0xc,0x9,0xb,0xa,0x8,0x8,0x2,0xc,0x1,0x0,0x4,0xb,0xa,0x4,0xa,0x2,0x2,0xc,0x9,0x1,0x8},
    {0x3,0xc,0x0,0xb,0x2,0x0,0x3,0x1,0x4,0x3,0x1,0x0,0x4,0x4,0xc,0xc,0x3,0x1,0x4,0x0,0x1,0xa,0x4,0x1,0x2,0x9,0xa,0x1,0x0,0x8,0xb,0x8},
    {0x3,0x3,0xc,0xc,0x1,0x0,0xa,0x4,0x0,0x4,0x3,0x2,0x8,0x9,0x9,0x4,0x1,0x1,0x8,0x3,0x3,0x2,0x3,0x8,0x4,0x9,0xc,0x2,0x2,0x3,0x0,0x4},
    {0xa,0xa,0x8,0x2,0xc,0x1,0x1,0x1,0x8,0xb,0x9,0x2,0x9,0xa,0xc,0xa,0x0,0x4,0x0,0x9,0x4,0x2,0x4,0x0,0x8,0x8,0xb,0xa,0x2,0x8,0x1,0x4},
    {0x2,0x0,0x8,0x1,0x3,0x8,0x0,0xc,0x9,0xc,0x2,0x9,0x0,0x8,0x8,0x2,0xa,0xa,0xc,0xb,0x2,0x2,0x3,0x1,0x1,0x4,0xa,0x4,0x4,0xa,0xa,0x4},
    {0x9,0x8,0x1,0xc,0x0,0xc,0xb,0x2,0x2,0x1,0x4,0x4,0x0,0x8,0x4,0xb,0xa,0xb,0x3,0x2,0xc,0x9,0x9,0xa,0x2,0x3,0x0,0x9,0x4,0x2,0x3,0xa},
    {0xb,0x2,0x4,0x1,0x1,0x9,0xb,0xc,0x3,0x3,0xc,0x1,0x8,0xb,0x2,0x9,0x3,0x8,0x9,0x0,0x0,0xc,0x8,0x4,0x8,0xa,0x2,0xb,0x2,0x4,0x2,0xb},
    {0x3,0x4,0x9,0x1,0xa,0x3,0x0,0x1,0xa,0x4,0x3,0x0,0x8,0x2,0x2,0xa,0x1,0x9,0x3,0x3,0x2,0x4,0x1,0x0,0x9,0x9,0xc,0x9,0xb,0x0,0x3,0x9},
    {0x3,0x0,0x1,0x2,0x4,0x8,0xa,0x0,0x9,0x3,0x9,0xb,0x9,0x2,0x2,0xc,0x3,0x8,0x0,0x3,0x3,0x0,0x3,0x1,0x8,0xa,0xa,0xc,0x4,0x0,0xb,0xa},
    {0x4,0x4,0x0,0xa,0x9,0x0,0x4,0x9,0x0,0x4,0xb,0x1,0x4,0x1,0x4,0x9,0x2,0xa,0x0,0x4,0x8,0xb,0x8,0xa,0x9,0xb,0x2,0x1,0xb,0x3,0xc,0x4},
    {0x9,0x2,0xc,0x8,0x1,0xb,0x0,0x0,0x0,0x8,0x9,0x9,0x8,0x2,0x9,0x8,0x2,0xa,0x4,0x4,0x1,0x0,0x2,0x3,0x3,0x2,0x9,0x0,0x9,0xc,0x2,0x0}
};

static const unsigned char h_rc_branch2[ORTHROS_MAX_ROUNDS][ORTHROS_STATE_SIZE] = {
    {0xa,0x3,0x4,0xa,0x8,0xc,0xa,0x0,0xa,0x8,0x8,0xb,0x0,0x4,0xa,0x1,0x9,0x8,0x2,0xb,0x9,0x3,0x8,0x1,0xb,0x2,0xb,0xa,0xc,0xa,0xc,0x8},
    {0xc,0xa,0x9,0x8,0x4,0x9,0x0,0xc,0x3,0x0,0x8,0xb,0x9,0xc,0x0,0xc,0x9,0x9,0x3,0x0,0x8,0xb,0xc,0x9,0x8,0x8,0x2,0x8,0x8,0xc,0x2,0xa},
    {0x4,0x0,0x3,0xa,0x2,0x3,0x1,0x1,0xb,0xc,0xc,0xb,0x1,0x3,0xa,0x4,0xa,0xb,0x3,0x9,0xa,0x8,0xc,0x4,0x2,0xb,0xa,0x9,0x3,0x9,0x2,0x4},
    {0x4,0x8,0x9,0x1,0x3,0xc,0x9,0xc,0x0,0xc,0x1,0x8,0x0,0x8,0xc,0xa,0x4,0x8,0x9,0x4,0xc,0x1,0x9,0xb,0x3,0x9,0x9,0xb,0x1,0x2,0x2,0x0},
    {0x3,0x2,0xb,0x3,0x2,0x1,0x8,0x4,0x3,0x0,0x1,0x0,0x9,0xc,0xa,0x4,0xa,0x3,0x1,0xc,0xa,0x9,0x1,0x2,0x3,0x9,0xb,0x8,0xc,0x8,0x3,0x8},
    {0x1,0x0,0xb,0xc,0xc,0x3,0x0,0x4,0xa,0x1,0xb,0x8,0x1,0x3,0xb,0x8,0x2,0x9,0xc,0x9,0x0,0xb,0x8,0xb,0xb,0x1,0x4,0x9,0x8,0xb,0xb,0x3},
    {0xa,0x9,0x1,0xc,0x2,0x3,0x3,0xa,0x4,0x0,0xc,0x2,0x3,0x3,0xb,0x3,0x4,0xa,0x0,0x2,0x8,0x9,0x9,0x0,0x0,0x0,0x2,0xb,0x4,0x0,0x9,0x3},
    {0x8,0xa,0x2,0x9,0x3,0x1,0xa,0xb,0x0,0x4,0x1,0x3,0xb,0xc,0x2,0xb,0xb,0x8,0x9,0xa,0x1,0x3,0xa,0xb,0xb,0xc,0x4,0xb,0x0,0x4,0x8,0xb},
    {0x9,0xb,0x1,0xb,0x8,0xb,0xc,0x3,0x9,0x0,0xa,0x3,0x4,0x2,0x2,0x0,0x4,0x8,0x0,0x9,0x1,0x2,0x4,0xa,0x9,0xa,0x1,0x8,0x0,0xa,0x3,0x2},
    {0xa,0x4,0xa,0xc,0x2,0x9,0xb,0x8,0x8,0x2,0x8,0x3,0xc,0x9,0x1,0x3,0xc,0xb,0x4,0x4,0x9,0x2,0xc,0x4,0x9,0x1,0xa,0xa,0x1,0x0,0x0,0xc},
    {0xc,0xa,0xb,0x0,0x8,0x9,0x0,0x9,0x4,0x8,0x1,0x0,0xc,0xb,0x0,0x4,0x3,0x2,0x0,0x1,0xa,0x2,0x0,0xc,0x0,0xa,0xc,0xc,0x0,0x9,0xb,0x1},
    {0x4,0xb,0xb,0xa,0x3,0xb,0x8,0x9,0x8,0x4,0xc,0xb,0x0,0x2,0x8,0xc,0x3,0x8,0x3,0x9,0x0,0x8,0x9,0xa,0x4,0xc,0xc,0xc,0xc,0xc,0xc,0x1}
};

static const unsigned int h_perm_b1[ORTHROS_STATE_SIZE * 4] = {6,46,62,126,70,52,28,14,36,125,72,83,106,95,4,35,25,41,10,76,87,74,120,42,88,21,11,67,64,38,112,50,85,109,24,65,99,0,49,37,8,66,114,47,127,100,56,40,13,117,78,86,92,58,124,101,55,89,97,9,18,116,59,15,20,45,75,2,77,27,1,60,115,107,26,69,119,3,84,51,123,110,31,82,113,53,81,102,63,118,93,12,30,94,108,32,5,111,29,43,91,19,79,33,73,44,98,48,22,61,68,105,34,71,54,104,17,57,80,103,96,121,23,39,122,90,7,16};
static const unsigned int h_perm_b2[ORTHROS_STATE_SIZE * 4] = {20,122,74,62,119,35,15,66,9,85,32,117,21,83,127,106,11,98,115,59,71,90,56,26,2,44,103,121,114,107,68,16,84,1,102,33,80,52,76,36,27,94,37,55,82,12,112,64,105,14,91,17,108,124,6,93,29,86,123,79,72,53,19,99,50,18,81,73,67,88,4,61,111,49,24,45,57,78,100,22,110,47,116,54,60,70,97,39,3,41,48,96,23,42,113,87,126,13,31,40,51,25,65,125,8,101,118,28,38,89,5,104,109,120,69,43,7,77,58,34,10,63,30,95,75,46,0,92};
static const unsigned int h_perm_k1[ORTHROS_STATE_SIZE * 4] = {0,53,87,73,22,95,99,48,61,36,108,1,24,67,119,93,54,103,69,112,16,111,94,122,31,66,33,83,47,3,65,62,123,9,101,19,5,58,89,37,38,51,28,106,82,76,121,4,70,7,42,92,104,80,45,75,114,17,2,97,46,107,63,18,109,15,127,43,13,59,29,125,77,11,50,30,12,90,118,64,20,35,57,10,124,56,68,91,116,21,84,98,52,81,126,34,105,27,120,74,6,85,40,72,113,41,23,49,79,55,102,8,117,39,88,26,25,110,14,32,115,100,86,71,78,44,96,60};
static const unsigned int h_perm_k2[ORTHROS_STATE_SIZE * 4] = {76,30,53,35,31,46,2,79,11,125,110,87,39,91,14,101,97,118,36,48,29,80,57,115,49,18,74,85,61,82,105,126,70,12,47,111,51,17,66,1,60,96,116,71,81,114,104,15,42,124,100,4,113,44,75,89,23,0,84,107,32,26,88,8,69,121,38,94,37,86,54,21,62,123,41,10,16,95,117,65,45,50,72,20,109,58,7,67,108,28,3,55,92,103,24,5,77,9,27,102,122,6,106,22,99,34,90,56,43,83,120,64,78,59,119,93,40,98,52,68,112,33,63,25,19,73,127,13};
static const unsigned char h_perm_n1[ORTHROS_STATE_SIZE] = {10,27,5,1,30,23,16,13,21,31,6,14,0,25,11,18,15,28,19,24,7,8,22,3,4,29,9,2,26,20,12,17};
static const unsigned char h_perm_n2[ORTHROS_STATE_SIZE] = {26,13,7,11,29,0,17,21,23,5,18,25,12,10,28,2,14,19,24,22,1,8,4,31,15,6,27,9,16,30,20,3};
static const unsigned char h_sbox[16] = {0x1,0x0,0x2,0x4,0x3,0x8,0x6,0xd,0x9,0xa,0xb,0xe,0xf,0xc,0x7,0x5};

// -----------------------------------------------------------------------------
// Helper routines
// -----------------------------------------------------------------------------

ORTHROS_HOST_DEVICE void nibble_to_bit(const unsigned char *nibble, unsigned char *bit) {
    for (int i = 0; i < ORTHROS_STATE_SIZE * 4; i++) {
        const int nib_index = i >> 2;
        const int bit_pos = 3 - (i & 0x3);
        bit[i] = (unsigned char)((nibble[nib_index] >> bit_pos) & 0x1);
    }
}

ORTHROS_HOST_DEVICE void bit_to_nibble(unsigned char *nibble, const unsigned char *bit) {
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        const int base = i << 2;
        unsigned char value = 0;
        value |= (bit[base + 0] & 0x1) << 3;
        value |= (bit[base + 1] & 0x1) << 2;
        value |= (bit[base + 2] & 0x1) << 1;
        value |= (bit[base + 3] & 0x1);
        nibble[i] = value & 0xF;
    }
}

ORTHROS_HOST_DEVICE void xor_state(const unsigned char *base,
                                    const unsigned char *diff,
                                    unsigned char *out) {
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        out[i] = (unsigned char)((base[i] ^ diff[i]) & 0xF);
    }
}

ORTHROS_HOST_DEVICE int dot_product(const unsigned char *a, const unsigned char *b) {
    int parity = 0;
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        unsigned char value = (unsigned char)(a[i] & b[i]);
        while (value) {
            parity ^= (value & 0x1);
            value >>= 1;
        }
    }
    return parity & 0x1;
}

// -----------------------------------------------------------------------------
// Core permutations and key schedule helpers
// -----------------------------------------------------------------------------

ORTHROS_HOST_DEVICE void bit_permutation(unsigned char *state, int branch) {
    unsigned char bit[ORTHROS_STATE_SIZE * 4];
    unsigned char permuted[ORTHROS_STATE_SIZE * 4];
    nibble_to_bit(state, bit);

#ifdef __CUDA_ARCH__
    const unsigned int *perm = (branch == 1) ? d_perm_b1 : d_perm_b2;
#else
    const unsigned int *perm = (branch == 1) ? h_perm_b1 : h_perm_b2;
#endif
    for (int i = 0; i < ORTHROS_STATE_SIZE * 4; i++) {
        permuted[perm[i]] = bit[i];
    }
    bit_to_nibble(state, permuted);
}

ORTHROS_HOST_DEVICE void nibble_permutation(unsigned char *state, int branch) {
    unsigned char buffer[ORTHROS_STATE_SIZE];
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        buffer[i] = state[i];
    }
#ifdef __CUDA_ARCH__
    const unsigned char *perm = (branch == 1) ? d_perm_n1 : d_perm_n2;
#else
    const unsigned char *perm = (branch == 1) ? h_perm_n1 : h_perm_n2;
#endif
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        state[perm[i]] = buffer[i];
    }
}

ORTHROS_HOST_DEVICE void mix_columns(unsigned char *state) {
    unsigned char buffer[ORTHROS_STATE_SIZE];
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        buffer[i] = state[i];
    }
    for (int i = 0; i < 8; i++) {
        state[(i << 2) + 0] = (unsigned char)(buffer[(i << 2) + 1] ^ buffer[(i << 2) + 2] ^ buffer[(i << 2) + 3]);
        state[(i << 2) + 1] = (unsigned char)(buffer[(i << 2) + 0] ^ buffer[(i << 2) + 2] ^ buffer[(i << 2) + 3]);
        state[(i << 2) + 2] = (unsigned char)(buffer[(i << 2) + 0] ^ buffer[(i << 2) + 1] ^ buffer[(i << 2) + 3]);
        state[(i << 2) + 3] = (unsigned char)(buffer[(i << 2) + 0] ^ buffer[(i << 2) + 1] ^ buffer[(i << 2) + 2]);
    }
}

ORTHROS_HOST_DEVICE void key_schedule(unsigned char *rk, int branch) {
    unsigned char bit[ORTHROS_STATE_SIZE * 4];
    unsigned char permuted[ORTHROS_STATE_SIZE * 4];
    nibble_to_bit(rk, bit);
#ifdef __CUDA_ARCH__
    const unsigned int *perm = (branch == 1) ? d_perm_k1 : d_perm_k2;
#else
    const unsigned int *perm = (branch == 1) ? h_perm_k1 : h_perm_k2;
#endif
    for (int i = 0; i < ORTHROS_STATE_SIZE * 4; i++) {
        permuted[perm[i]] = bit[i];
    }
    bit_to_nibble(rk, permuted);
}

ORTHROS_HOST_DEVICE void apply_sbox(unsigned char *state) {
#ifdef __CUDA_ARCH__
    const unsigned char *sbox = d_sbox;
#else
    const unsigned char *sbox = h_sbox;
#endif
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        state[i] = sbox[state[i] & 0xF];
    }
}

// -----------------------------------------------------------------------------
// Encryption primitive
// -----------------------------------------------------------------------------

ORTHROS_HOST_DEVICE void process_branch(unsigned char *state,
                                         unsigned char *rk,
                                         int branch,
                                         int offset,
                                         int rounds) {
    key_schedule(rk, branch);
    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        state[i] ^= rk[i];
    }

    for (int r = offset; r < offset + rounds; r++) {
        apply_sbox(state);
        if (r < 4) {
            bit_permutation(state, branch);
        } else {
            nibble_permutation(state, branch);
        }
        mix_columns(state);
        key_schedule(rk, branch);
#ifdef __CUDA_ARCH__
        const unsigned char *rc = (branch == 1) ? d_rc_branch1[r] : d_rc_branch2[r];
#else
        const unsigned char *rc = (branch == 1) ? h_rc_branch1[r] : h_rc_branch2[r];
#endif
        for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
            state[i] = (unsigned char)((state[i] ^ rk[i] ^ rc[i]) & 0xF);
        }
    }
}

ORTHROS_HOST_DEVICE void orthros_encrypt(const unsigned char *pt_left,
                                          const unsigned char *pt_right,
                                          unsigned char *ct,
                                          const unsigned char *key,
                                          int offset,
                                          int rounds,
                                          OrthrosMode mode) {
    unsigned char x1[ORTHROS_STATE_SIZE];
    unsigned char x2[ORTHROS_STATE_SIZE];
    unsigned char rk1[ORTHROS_STATE_SIZE];
    unsigned char rk2[ORTHROS_STATE_SIZE];

    for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
        x1[i] = pt_left[i] & 0xF;
        x2[i] = pt_right[i] & 0xF;
        rk1[i] = key[i] & 0xF;
        rk2[i] = key[i] & 0xF;
    }

    if (mode == ORTHROS_MODE_LEFT) {
        process_branch(x1, rk1, 1, offset, rounds);
        for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
            ct[i] = x1[i];
        }
    } else if (mode == ORTHROS_MODE_RIGHT) {
        process_branch(x2, rk2, 2, offset, rounds);
        for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
            ct[i] = x2[i];
        }
    } else {
        process_branch(x1, rk1, 1, offset, rounds);
        process_branch(x2, rk2, 2, offset, rounds);
        for (int i = 0; i < ORTHROS_STATE_SIZE; i++) {
            ct[i] = (unsigned char)((x1[i] ^ x2[i]) & 0xF);
        }
    }
}

#endif // ORTHROS_CORE_H
